version: "3.8"

services:

  # MQTT Broker
  mqtt-broker:
    image: eclipse-mosquitto
    container_name: mqtt-broker
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto:/mosquitto/config
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${MQTT_PORT}"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    restart: always
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${ZOOKEEPER_CLIENT_PORT}"]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    depends_on:
      - zookeeper
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 5s
      timeout: 3s
      retries: 10

  # PostgreSQL DB
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d sensor_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Sensor Simulators
  sensor-berat:
    container_name: sensor-berat
    build: ./sensor-berat
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
    depends_on:
      mqtt-broker:
        condition: service_healthy      
    restart: always

  sensor-kecepatan:
    container_name: sensor-kecepatan
    build: ./sensor-kecepatan
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
    depends_on:
      mqtt-broker:
        condition: service_healthy      
    restart: always

  sensor-status:
    container_name: sensor-status
    build: ./sensor-status
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
    depends_on:
      mqtt-broker:
        condition: service_healthy
    restart: always

  # MQTT to Kafka Bridge
  mqtt-bridge:
    container_name: mqtt-bridge
    build: ./mqtt-bridge
    depends_on:
      mqtt-broker:
        condition: service_healthy
      kafka:
        condition: service_healthy      
    environment:
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_PORT=${MQTT_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    restart: always

  # Processor Service
  processor-service:
    container_name: processor-service
    build: ./processor-service
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - POSTGRES_HOST=${POSTGRES_HOST}
    restart: always

  # OEE API Service
  oee-service:
    container_name: oee-service
    build: ./oee-service
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
    restart: always

  # Dashboard (React)
  frontend-dashboard:
    container_name: frontend-dashboard
    build:
      context: ./frontend-dashboard
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    depends_on:
      - oee-service
    restart: always

volumes:
  pgdata: